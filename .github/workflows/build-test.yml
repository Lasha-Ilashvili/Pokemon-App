name: Reusable Build and Test

on:
  workflow_call:
    inputs:
      mode:
        required: true
        type: string
        description: 'Mode: ci (test only) or cd (build release)'

env:
  GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4g -XX:MaxMetaspaceSize=512m" -Dorg.gradle.daemon=false

jobs:
  test-and-lint:
    name: Test and Lint
    runs-on: ubuntu-latest
    environment: ${{ inputs.mode == 'ci' && 'ci' || null }}
    if: inputs.mode == 'ci'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java with Gradle caching
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Run lint and unit tests
        run: |
          ./gradlew lintDebug testDebugUnitTest jacocoTestReport compileDebugSources \
            --parallel --build-cache --continue

      - name: Run dependency vulnerability scan
        run: ./gradlew dependencyCheckAnalyze --parallel --build-cache
        continue-on-error: true

      - name: Upload test and lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-reports
          path: |
            app/build/reports/lint-results-*.html
            app/build/reports/jacoco/
            build/reports/dependency-check-report.html
          retention-days: 7

      - name: Generate test reports
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Unit Test Results
          path: app/build/test-results/testDebugUnitTest/TEST-*.xml
          reporter: java-junit
          fail-on-error: true

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request' && always()
        uses: madrapps/jacoco-report@v1.6.1
        with:
          paths: app/build/reports/jacoco/testDebugUnitTest/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 70
          min-coverage-changed-files: 80

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    if: inputs.mode == 'ci'
    permissions:
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: java

  build-release:
    name: Build Release APK
    runs-on: ubuntu-latest
    environment: ${{ inputs.mode == 'cd' && 'cd' || null }}
    if: inputs.mode == 'cd'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java with Gradle caching
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Build Release APK
        run: |
          VERSION=$(grep 'versionName=' version.properties | cut -d'=' -f2 || echo "1.0.0")
          echo "Building release version: $VERSION"
          
          ./gradlew assembleRelease \
            -PversionName="$VERSION" \
            -PversionCode=${{ github.run_number }} \
            --parallel --build-cache

      - name: Upload Release APK and mapping
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            app/build/outputs/apk/release/*.apk
            app/build/outputs/mapping/release/mapping.txt
          retention-days: 30